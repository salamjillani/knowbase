// controllers/searchController.js - Updated Version
const { createCollectionModels, staticCollectionMap } = require('../models/DataModel');
const User = require('../models/User');

let collectionMap = null;

// Initialize collection models on first use
async function initializeCollectionMap() {
  if (!collectionMap) {
    try {
      console.log('üîÑ Initializing collection models...');
      collectionMap = await createCollectionModels();
      console.log('‚úÖ Collection models initialized:', Object.keys(collectionMap));
    } catch (error) {
      console.error('‚ùå Failed to create dynamic collection models:', error);
      console.log('üîÑ Falling back to static collection map...');
      collectionMap = staticCollectionMap;
    }
  }
  return collectionMap;
}

exports.search = async (req, res) => {
  try {
    const { query, type } = req.body;
    const userId = req.user.id;
    
    console.log('üîç Search request:', { query, type, userId });
    
    if (!query) {
      return res.status(400).json({ message: 'Query is required' });
    }
    
    // Initialize collection models
    const collections = await initializeCollectionMap();
    
    if (!collections || Object.keys(collections).length === 0) {
      return res.status(500).json({ message: 'No collections available for search' });
    }
    
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    console.log('üë§ User points:', user.points);
    
    if (user.points < 1) {
      return res.status(400).json({ message: 'Insufficient points' });
    }
    
    // Enhanced field mapping for search
    const fieldMap = {
      phoneNumber: [
        // English variants
        'phone', 'phoneNumber', 'mobile', 'tel', 'telephone', 'cellphone',
        // Chinese variants
        'ÊâãÊú∫', 'ËÅîÁ≥ªÊñπÂºè', 'ÊâãÊú∫Âè∑', 'ÁîµËØù', 'ÁßªÂä®ÁîµËØù', 'ÊâãÊú∫Âè∑Á†Å', 'ËÅîÁ≥ªÁîµËØù'
      ],
      email: [
        // English variants
        'email', 'emailAddress', 'mail', 'e-mail',
        // Chinese variants
        'ÈÇÆÁÆ±', 'ÁîµÂ≠êÈÇÆÁÆ±', 'ÈÇÆ‰ª∂', 'ÁîµÂ≠êÈÇÆ‰ª∂', 'ÈÇÆÁÆ±Âú∞ÂùÄ'
      ],
      idNumber: [
        // English variants
        'idNumber', 'ID', 'id', 'identityNumber', 'cardNumber', 'idCard',
        // Chinese variants
        'Ë∫´‰ªΩËØÅ', 'ËØÅ‰ª∂Âè∑Á†Å', 'Ë∫´‰ªΩËØÅÂè∑', 'Ë∫´‰ªΩËØÅÂè∑Á†Å', 'ËØÅ‰ª∂Âè∑'
      ],
      qqNumber: [
        // English variants
        'qq', 'qqNumber', 'QQ', 'qqID',
        // Chinese variants
        'qqÂè∑', 'QQÂè∑', 'qqÂè∑Á†Å', 'QQÂè∑Á†Å'
      ],
      weChatID: [
        // English variants
        'wechat', 'WeChat', 'weChatID', 'wechatID', 'weChatNumber',
        // Chinese variants
        'ÂæÆ‰ø°', 'ÂæÆ‰ø°Âè∑', 'ÂæÆ‰ø°Âè∑Á†Å', 'ÂæÆ‰ø°ID', 'ÂæÆ‰ø°Ë¥¶Âè∑'
      ],
      weiboID: [
        // English variants
        'weibo', 'Weibo', 'weiboID', 'weiboNumber',
        // Chinese variants
        'ÂæÆÂçö', 'ÂæÆÂçöÂè∑', 'ÂæÆÂçöID', 'ÂæÆÂçöË¥¶Âè∑'
      ]
    };
    
    const collectionNames = Object.keys(collections);
    console.log('üìÅ Searching in collections:', collectionNames);
    
    let results = [];
    
    for (const collectionName of collectionNames) {
      try {
        const Model = collections[collectionName];
        let searchQuery = {};
        
        if (type && fieldMap[type]) {
          // Search using specific field type
          const fieldQueries = fieldMap[type].map(field => ({
            [field]: { $regex: query, $options: 'i' }
          }));
          
          searchQuery = { $or: fieldQueries };
        } else {
          // Generic search across all common fields
          const allFields = [
            // Common English fields
            'name', 'phone', 'email', 'idNumber', 'qq', 'wechat', 'weibo',
            'phoneNumber', 'qqNumber', 'weChatID', 'weiboID', 'address',
            'company', 'contact', 'mobile', 'title', 'description',
            
            // Common Chinese fields
            'ÂßìÂêç', 'ÊâãÊú∫', 'ËÅîÁ≥ªÊñπÂºè', 'ÊâãÊú∫Âè∑', 'ÁîµËØù', 'ÈÇÆÁÆ±', 'Ë∫´‰ªΩËØÅ', 
            'ËØÅ‰ª∂Âè∑Á†Å', 'qqÂè∑', 'ÂæÆ‰ø°', 'ÂæÆ‰ø°Âè∑', 'ÂæÆÂçö', 'ÂæÆÂçöÂè∑',
            'ËÅîÁ≥ª‰∫∫', '‰ºÅ‰∏öÂêçÁß∞', '‰∫ßÂìÅÂêçÁß∞', 'Âú∞ÂùÄ', '‰ºÅ‰∏öÂú∞ÂùÄ', 'Êî∂Ë¥ßÂú∞ÂùÄ',
            'ÂÖ¨Âè∏ÂêçÁß∞', 'ËÅîÁ≥ªÂú∞ÂùÄ', 'ËØ¶ÁªÜÂú∞ÂùÄ', 'ÂßìÂêç', 'Áî®Êà∑Âêç', 'ÂÆ¢Êà∑ÂêçÁß∞'
          ];
          
          searchQuery = {
            $or: allFields.map(field => ({
              [field]: { $regex: query, $options: 'i' }
            }))
          };
        }
        
        console.log(`üîç Searching collection "${collectionName}"`);
        console.log(`üìù Search query:`, JSON.stringify(searchQuery, null, 2));
        
        const data = await Model.find(searchQuery).limit(20);
        console.log(`üìä Found ${data.length} results in "${collectionName}"`);
        
        if (data.length > 0) {
          console.log(`üìã Sample result from "${collectionName}":`, JSON.stringify(data[0]._doc, null, 2));
          
          // Add source information to results
          const resultsWithSource = data.map(item => ({
            ...item._doc,
            source: collectionName,
            _id: item._id
          }));
          
          results = results.concat(resultsWithSource);
        }
        
      } catch (collectionError) {
        console.error(`‚ùå Error searching collection "${collectionName}":`, collectionError.message);
        continue;
      }
    }
    
    console.log(`üéØ Total results found: ${results.length}`);
    
    // Deduct points for the search
    user.points -= 1;
    await user.save();
    console.log('üí∞ Points deducted, new balance:', user.points);
    
    res.json(results);
    
  } catch (error) {
    console.error('‚ùå Search error:', error);
    res.status(500).json({ 
      message: 'Server error', 
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};